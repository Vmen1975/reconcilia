/**
 * INSTRUCCIONES DE CORRECCI√ìN
 * 
 * Este c√≥digo debe reemplazar la funci√≥n calculateMatchConfidence en src/services/reconciliation.ts
 * 
 * El cambio principal es que a√±ade una validaci√≥n estricta de diferencia de monto
 * que rechaza autom√°ticamente cualquier coincidencia si la diferencia porcentual
 * supera la tolerancia configurada (finalAmountTolerance).
 * 
 * Para aplicar esta correcci√≥n:
 * 1. Busca la funci√≥n calculateMatchConfidence en src/services/reconciliation.ts
 * 2. Reempl√°zala con esta versi√≥n
 * 3. Reinicia el servidor
 */

calculateMatchConfidence(transaction: BankTransaction, entry: AccountingEntry): number {
  let confidence = 0;
  let detailedReason = [];
  
  const txAmount = normalizeAmount(transaction.amount);
  const entryAmount = normalizeAmount(entry.amount);
  
  // Determinar si la transacci√≥n y la entrada son ingresos o egresos
  const isTxPositive = txAmount >= 0;
  const isEntryPositive = entryAmount >= 0;
  
  console.log('üîç Comparando montos con signos preservados:', {
    tx: {
      id: transaction.id, 
      desc: transaction.description,
      monto_orig: transaction.amount,
      monto_norm: txAmount,
      es_positivo: isTxPositive
    },
    entry: {
      id: entry.id,
      ref: entry.reference,
      monto_orig: entry.amount,
      monto_norm: entryAmount,
      es_positivo: isEntryPositive
    }
  });
  
  // INICIO DE CAMBIOS: Usar valor fijo de tolerancia de 1% para estar seguros
  const configuredAmountTolerance = 0.01; // 1% como tolerancia segura y conservadora
  
  // Compatibilidad de signos (hasta 20% adicional)
  // Regla: Ingresos bancarios deben coincidir con entradas contables positivas,
  // Egresos bancarios deben coincidir con entradas contables negativas
  const signsCompatible = (isTxPositive && isEntryPositive) || (!isTxPositive && !isEntryPositive);
  
  if (signsCompatible) {
    confidence += 20;
    detailedReason.push("‚úÖ Signos compatibles: +20");
  } else {
    detailedReason.push("‚ùå Signos incompatibles (deber√≠a ser positivo-positivo o negativo-negativo)");
    // Si los signos no son compatibles, bajamos la confianza
    confidence -= 40;
    detailedReason.push("‚ùå Penalizaci√≥n por signos incompatibles: -40");
  }
  
  // Coincidencia por monto absoluto (hasta 50%) - Aumentamos el peso de la coincidencia por monto
  const absAmountDiff = Math.abs(
    (Math.abs(txAmount) - Math.abs(entryAmount)) / (Math.abs(txAmount) || 1) // Evitar divisi√≥n por cero
  );
  
  // CAMBIO CLAVE: Rechazar autom√°ticamente si la diferencia supera la tolerancia
  if (absAmountDiff > configuredAmountTolerance) {
    console.log(`‚ùå DESCARTADO AUTOM√ÅTICAMENTE: Diferencia de monto (${(absAmountDiff * 100).toFixed(2)}%) supera la tolerancia m√°xima (${(configuredAmountTolerance * 100).toFixed(2)}%)`);
    return 0; // Retornar confianza 0 para rechazar esta coincidencia
  }
  
  // A partir de aqu√≠ solo llegamos si la diferencia est√° dentro de la tolerancia
  if (absAmountDiff === 0) {
    // Coincidencia exacta de montos, mayor confianza
    confidence += 50;
    detailedReason.push("‚úÖ Montos exactamente iguales: +50");
    console.log(`üí∞ Montos exactamente iguales: ${Math.abs(txAmount)} = ${Math.abs(entryAmount)}`);
  } else {
    // Diferencia dentro de tolerancia, asignar puntos proporcionales
    const puntos = Math.round(50 * (1 - (absAmountDiff / configuredAmountTolerance)));
    confidence += puntos;
    detailedReason.push(`‚úÖ Diferencia de monto (${(absAmountDiff * 100).toFixed(2)}%) dentro de tolerancia: +${puntos}`);
    console.log(`üí∞ Diferencia de monto (${(absAmountDiff * 100).toFixed(2)}%): +${puntos} puntos`);
  }
  // FIN DE CAMBIOS
  
  // Coincidencia por fecha (hasta 30%)
  // Usar fechas en formato string para evitar problemas de zona horaria
  const dateDiff = calculateDateDiffInDays(transaction.transaction_date, entry.date);
  
  // Variable para almacenar la confianza basada en la diferencia de fechas
  let dateConfidence = 0;

  if (dateDiff === 0) {
    dateConfidence = 30;
    console.log(`üìÖ Fechas exactamente iguales: +30% confianza`);
    detailedReason.push("‚úÖ Misma fecha: +30");
  } else if (dateDiff <= 3) {
    // Menor penalizaci√≥n para diferencias de hasta 3 d√≠as
    dateConfidence = 25;
    console.log(`üìÖ Fechas cercanas (${dateDiff} d√≠as): +25% confianza`);
    detailedReason.push(`‚úÖ Diferencia de ${dateDiff} d√≠as: +25`);
  } else if (dateDiff <= 7) {
    // Diferencia de hasta una semana
    dateConfidence = 20;
    console.log(`üìÖ Fechas dentro de la semana (${dateDiff} d√≠as): +20% confianza`);
    detailedReason.push(`‚úÖ Diferencia de ${dateDiff} d√≠as: +20`);
  } else if (dateDiff <= 14) {
    // Diferencia de hasta dos semanas
    dateConfidence = 15;
    console.log(`üìÖ Fechas dentro de dos semanas (${dateDiff} d√≠as): +15% confianza`);
    detailedReason.push(`‚úÖ Diferencia de ${dateDiff} d√≠as: +15`);
  } else if (dateDiff <= 30) {
    // Diferencia de hasta un mes
    dateConfidence = 10;
    console.log(`üìÖ Fechas dentro del mes (${dateDiff} d√≠as): +10% confianza`);
    detailedReason.push(`‚úÖ Diferencia de ${dateDiff} d√≠as: +10`);
  } else {
    // M√°s de un mes, confianza m√≠nima por fecha
    dateConfidence = 5;
    console.log(`üìÖ Fechas distantes (${dateDiff} d√≠as): +5% confianza`);
    detailedReason.push(`‚úÖ Fechas distantes (${dateDiff} d√≠as): +5`);
  }
  
  confidence += dateConfidence;
  
  // Coincidencia por descripci√≥n y referencia (hasta 20%)
  let descriptionScore = 0;
  const txDesc = (transaction.description || '').toLowerCase();
  const txRef = (transaction.reference_number || '').toLowerCase();
  const entryRef = (entry.reference || '').toLowerCase();
  const entryDesc = (entry.description || '').toLowerCase();
  
  // Coincidencia exacta de referencias
  if (txRef && entryRef && txRef === entryRef) {
    descriptionScore = 20;
    detailedReason.push("‚úÖ Referencias id√©nticas: +20");
  }
  // Inclusi√≥n de referencias
  else if (
    (txRef && entryRef && (txRef.includes(entryRef) || entryRef.includes(txRef))) ||
    (txDesc && entryRef && txDesc.includes(entryRef)) ||
    (txRef && entryDesc && txRef.includes(entryDesc))
  ) {
    descriptionScore = 15;
    detailedReason.push("‚úÖ Referencias/descripciones coinciden parcialmente: +15");
  }
  // B√∫squeda de n√∫meros comunes (posibles facturas, √≥rdenes, etc.)
  else {
    // Extraer n√∫meros de la descripci√≥n y referencia
    const txNumbers = this.extractNumbers(txDesc + " " + txRef);
    const entryNumbers = this.extractNumbers(entryRef + " " + entryDesc);
    
    // Verificar si hay n√∫meros coincidentes
    for (const txNum of txNumbers) {
      if (entryNumbers.includes(txNum) && txNum.length >= 4) {
        descriptionScore = 10;
        detailedReason.push(`‚úÖ N√∫mero com√∫n encontrado (${txNum}): +10`);
        break;
      }
    }
    
    // Si no hay coincidencia num√©rica, buscar palabras clave
    if (descriptionScore === 0) {
      const keywords = ['factura', 'pago', 'transferencia', 'abono', 'cargo', 'compra', 'venta'];
      for (const keyword of keywords) {
        if ((txDesc.includes(keyword) && entryDesc.includes(keyword)) || 
            (txDesc.includes(keyword) && entryRef.includes(keyword)) || 
            (txRef.includes(keyword) && entryDesc.includes(keyword))) {
          descriptionScore = 5;
          detailedReason.push(`‚úÖ Palabra clave com√∫n (${keyword}): +5`);
          break;
        }
      }
    }
  }
  
  confidence += descriptionScore;
  
  // Si la confianza es negativa por las penalizaciones, establecerla en 0
  confidence = Math.max(0, confidence);
  
  // Limitar la confianza m√°xima a 100%
  const finalConfidence = Math.min(confidence, 100);

  // Verificar si la confianza est√° por encima del umbral m√≠nimo (esto es solo para informaci√≥n)
  // El umbral m√≠nimo se verifica en la funci√≥n autoReconcile antes de crear la conciliaci√≥n
  const configConfidenceThreshold = 70; // Umbral predeterminado para informaci√≥n
  const isAboveThreshold = finalConfidence >= configConfidenceThreshold;

  console.log(`üîç Evaluaci√≥n de confianza: ${finalConfidence}% ${isAboveThreshold ? '‚úÖ SUFICIENTE' : '‚ùå INSUFICIENTE'}`);
  console.log(`üîç Razones detalladas:`, detailedReason);

  return finalConfidence;
}, 